# -*- coding: utf-8 -*-
"""reviewScore.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1shVsd_g2vhZAlb4Oz9tDZZ41IspaeOk3
"""

import pandas as pd
import re
from konlpy.tag import Mecab
from gensim import models

def tokenizing(data):
    mecab = Mecab()
    stopwords = ['강의' '건대', '교수', '대학', '사람', '설명', '수업', '심교', '시대', '영화', '학생', '교양','시험']
    
    def extract_noun(sent):
        sent = re.sub(r'[^\s\da-zA-Z가-힣]', ' ', sent) # 숫자, 공백, 문자 외 제거
        sent = re.sub(r'\s{2,}', '\n', sent).strip() # 공백이 2개 이상 반복되는 경우 하나만 남김
        # s = mecab.nouns()
        nouns = mecab.pos(sent)
        # nouns = [w[0] for w in s if (w[1] == 'Noun' and len(w[0]) > 1)] # 두 글자 이상인 명사만 추출
        return nouns
    
    #tokens = [[word for word,tag in (extract_noun(sent)) if not word in stopwords and len(word) > 1] for sent in data]
    tokens = [[word for word,tag in (extract_noun(sent)) if not word in stopwords and tag in ["NNG","NNP","VA","VA+ETM"]] for sent in data]
    # 명사 "NNG","NNP"
    # 동사 "vv"
    # 형용사 "va" 

    return tokens

df = pd.read_csv('에타리뷰_수정.csv')

token = tokenizing(df['리뷰'])

token

test = []
for i in range(len(token)):
  testStr = " ".join(token[i])
  test.append(testStr)

from sklearn.feature_extraction.text import TfidfVectorizer

tfidfv = TfidfVectorizer().fit(test)

print(tfidfv.transform(test).toarray())
print(tfidfv.vocabulary_)

testDataframe = tfidfv.transform(test).toarray()

tfidfv.vocabulary_

dataframe = pd.DataFrame(testDataframe, columns = sorted(tfidfv.vocabulary_))

pos_list = ['재밌',
 '부담',
 '과제',
 '친절',
 '공부',
 '필요',
 '괜찮',
 '이쁠',
 '재미있',
 '이해',
 '개꿀',
 '가능',
 '제출',
 '관심',
 '유익',
 '노력',
 '기초',
 '열정',
 '최고',
 '난이도',
 '무리',
 '추천',
 '에이',
 '내용',
 '중간',
 '필기',
 '착하',
 '분량',
 '귀여우',
 '입문',
 '실시간',
 '알차',
 '오픈',
 '기말',
 '피드백',
 '정도',
 '만족',
 '정보',
 '조별',
 '대용',
 '패스',
 '빠르',
 '행복',
 '사랑',
 '힐링',
 '질문']

posDF = dataframe[pos_list]

posDF["posSum"] = posDF.sum(axis=1)
posDF

neg_list=['최악',
 '이상',
 '자신',
 '발표',
 '지엽',
 '점수',
 '스트레스',
 '신청',
 '평가',
 '비추',
 '처음',
 '짜증',
 '함정',
 '나쁘',
 '공지',
 '미사여구',
 '발음',
 '판단',
 '정치',
 '낭독',
 '실망',
 '이유',
 '선택',
 '결핍',
 '오류',
 '의견',
 '주관',
 '소신',
 '인강',
 '양도',
 '시험지',
 '장점',
 '파트너',
 '강사',
 '실습',
 '보강',
 '결국',
 '성격',
 '중요',
 '서술',
 '강요',
 '태도',
 '강의실',
 '관람',
 '페미니즘',
 '학습',
 '교실',
 '가요',
 '중간고사',
 '목소리',
 '충격',
 '우왕좌왕',
 '불편',
 '여깄',
 '투척',
 '방식',
 '흔하',
 '도박',
 '중학교',
 '감독']

negDF = dataframe[neg_list]

negDF["negSum"] = negDF.sum(axis=1)
negDF

# df 합치기

DF = pd.concat([posDF['posSum'], negDF['negSum']],axis = 1)

slicingDF = df[['교과목명','교수명','평점']]

slicingDF

df2 = pd.concat([slicingDF, DF],axis = 1)

df2.info()

df2['score'] = 0.0

for i in range(len(df2)):
  if (df2['posSum'][i] + df2['negSum'][i]) != 0:
    df2['score'][i] = ((df2['posSum'][i] - df2['negSum'][i]) / (df2['posSum'][i] + df2['negSum'][i]))
    #print((df2['posSum'][i] - df2['negSum'][i]) / (df2['posSum'][i] + df2['negSum'][i]))
    #print(df2['score'][i])
  #else:
    #df2['score'][i] = 0

df2['newScore'] = df2['평점'] + df2['score']

# 과목/교수별 평점

final = df2.groupby(['교과목명','교수명']).mean()

final